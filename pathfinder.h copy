/*  * File:   pathfinder.h * Author: Suzanne Aldrich * Date:   12/5/97 * ------------ * Pathfinder header file. */#ifndef _pathfinder_h#define _pathfinder_h#include <stdio.h>#include <ctype.h>#include <math.h>#include <assert.h>#include "genlib.h"#include "strlib.h"#include "simpio.h"#include "extgraph.h"#include "symtab.h"#include "iterator.h"#include "set.h"#include "cmpfn.h"#include "graph.h"#include "path.h"#include "pqueue.h"#include "foreach.h"#define MAX_STRING 256#define DEFAULT_FILE "Cities"#define CIRCLE_RADIUS .05#define DX CIRCLE_RADIUS + 0.05#define DY -CIRCLE_RADIUS#define NODE_COLOR "Black"#define HILITE_COLOR "Blue"#define ARC_COLOR "Gray"#define TIME_COLOR "Magenta"#define DISTANCE_COLOR "Cyan"#define COST_COLOR "Green"#define HOPS_COLOR "Yellow"#define RISK_COLOR "Red"#define TEXT_COLOR "Black"#define NORMAL_DENSITY 0.0#define HILITE_DENSITY 0.5typedef struct {	double x, y;} coord;typedef struct {	string picture;	symtabADT nodetable;	nodeADT *start, *finish;} graphDataT;typedef struct {	string name;	coord location;	double distance;} nodeDataT;typedef struct {	string means;	double distance, time, cost, risk;} arcDataT;graphADT InitMap(void);void Welcome(void);void ReadFileData(graphADT map);bool BoolQuestion(string prompt);void GetUserNodes(graphADT map);coord GetUserMouseClick(void);bool ValidNode(graphADT map, coord click, nodeADT **nodeptr);double distance(coord a, coord b);void DrawFilledCircle(double r, string color, double density);void FindRoutes(graphADT map);pathADT FindShortestPath(nodeADT start, nodeADT finish, arcWeightFnT weightFn);void FixNodeDistance(nodeADT node, double distance);void ClearNodeDistance(nodeADT node);bool IsDistanceFixed(nodeADT node);void DrawMap(graphADT map);void ClearMap(graphADT map);void DrawPathSegment(arcADT arc, string color, double density);void DrawAllArcs(graphADT map);void DrawOneArc(arcADT arc, string color);void DrawAllNodes(graphADT map);void DrawOneNode(nodeADT node, string color, double density);double TimeWeightFn(arcADT arc);double DistanceWeightFn(arcADT arc);double CostWeightFn(arcADT arc);double HopsWeightFn(arcADT arc);double RiskWeightFn(arcADT arc);void TimeMapFn(arcADT arc, void *clientData);void DistanceMapFn(arcADT arc, void *clientData);void CostMapFn(arcADT arc, void *clientData);void HopsMapFn(arcADT arc, void *clientData);void RiskMapFn(arcADT arc, void *clientData);#endif