/* * File: path.c * ------------- * Implements the path.h abstraction. */#include <stdio.h>#include "genlib.h"#include "path.h"typedef struct pathElementT {	arcADT arcptr;	struct pathElementT *link;} pathElementT;struct pathCDT {    pathElementT *start, *end;    arcWeightFnT weightFunc;} pathCDT;pathADT NewPath(arcWeightFnT weightFn){	pathADT path = GetBlock(sizeof(pathCDT));		path->start = path->end = NULL;	path->weightFunc = weightFn;	return path;}void FreePath(pathADT path){	pathElementT *ptra, *ptrb;		ptra = path->start;	while (ptra != NULL) {		ptrb = ptra->link;		FreeBlock(ptra);		ptra = ptrb;	}	FreeBlock(path);}pathADT NewExtendedPath(pathADT path, arcADT arc){	pathADT newpath = CopyPath(path);		AppendToPath(newpath, arc);	return newpath;}void AppendToPath(pathADT path, arcADT element){	pathElementT *newelem = GetBlock(sizeof(pathElementT));	 	newelem->arcptr = element;	newelem->link = NULL;	if (path->end) {		path->end->link = newelem;		path->end = newelem;	} else {	 	path->start = path->end = newelem;	}}nodeADT StartOfPath(pathADT path){	return (StartOfArc(path->start->arcptr));}nodeADT EndOfPath(pathADT path){	return (EndOfArc(path->end->arcptr));}pathADT CopyPath(pathADT path){	pathADT newpath = NewPath(path->weightFunc);	pathElementT *ptr;	arcADT arc;		for (ptr = path->start; ptr != NULL; ptr = ptr->link) {		arc = ptr->arcptr;		AppendToPath(newpath, arc);	}	return newpath;}double TotalPathDistance(pathADT path){	double distance = 0;	pathElementT *ptr;	arcADT arc;		for (ptr = path->start; ptr != NULL; ptr = ptr->link) {		arc = ptr->arcptr;		distance += path->weightFunc(arc);	}	return distance;}void MapPath(pathADT path, arcMappingFnT mapFn, void *clientData){		pathElementT *ptr;	arcADT arc;		for (ptr = path->start; ptr != NULL; ptr = ptr->link) {		arc = ptr->arcptr;		mapFn(arc, clientData);	}	return;}